const AppError = require('./../utils/appError');
const handleCastErrorDB = (err) => {
  const message = `Invalid ${err.path}: ${err.value}.`;
  return new AppError(message, 400);
};
const handleDuplicateFieldsDB = (err) => {
  // const value = err.errmsg.match(/(["'])(?:(?=(\\?))\2.)*?\1/);
  const keys = Object.keys(err.keyValue);
  let value = err.keyValue.keys[0];

  const message = `Duplicate field value in database: ${value}. Please use another value`;
  return new AppError(message, 400);
};
const handleValidationErrorDB = (err) => {
  const errors = Object.values(err.errors).map((el) => el.message);

  const message = `Invalid input data111111. ${errors.join('. ')}`;
  return new AppError(message, 400);
};
const handleJWTError = (er) => {
  return new AppError('Invalid token. Please log in again!', 401);
};
const handleJWTExpired = () => {
  return new AppError('Your time login is run out. Please log in again!', 401);
};
const sendErrorDev = (err, res) => {
  res.status(err.statusCode).json({
    status: err.status,
    error: err,
    message: err.message,
    stack: err.stack,
  });
};
const sendErrorProd = (err, res) => {
  // Operational, trusted error: send message to client
  //Nh·ªØng l·ªói ƒë√£ ƒë∆∞·ª£c x√°c ƒë·ªãnh v√† ƒë·ªãnh nghƒ©a, n·∫øu l·ªói ƒë√≥ ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a th√¨ tr·∫£ v·ªÅ code 500
  if (err.isOperational) {
    res.status(err.statusCode).json({
      status: err.status,
      message: err.message,
    });

    // Programming or other unknown error: don't leak error details
  } else {
    // 1) Log error
    console.error('ERROR üí•', err);

    // 2) Send generic message
    res.status(500).json({
      status: 'error',
      message: 'Something went very wrong!',
    });
  }
};
globalErrorHandler = (err, req, res, next) => {
  //console.log(err.stack); //show us where the error happened
  //Kh√¥ng set status 404,400... cho thg err ƒë∆∞·ª£c m√† ph·∫£i set ·ªü c√°c middleware kh√°c v√¨ ƒë√¢u bi·∫øt n√≥ code bao nhi√™u ƒë√¢u m√† set
  // v√† khi c√≥ l·ªói s·∫Ω nh·∫£y sang thg n√†y v√† ch·∫°y ti·∫øp
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error'; //error is status for code 500

  // chia ra 2 thg : 1 l√† khi dev ta c·∫ßn nhi·ªÅu th√¥ng tin h∆°n ƒë·ªÉ debug
  //2 l√† khi deploy th√¨ ch·ªâ c·∫ßn status vs message l√† ƒë·ªß
  if (process.env.NODE_ENV === 'development') {
    sendErrorDev(err, res);
  } else if (process.env.NODE_ENV === 'production') {
    //Vi·ªác ·ªü trong block code n√†y l√† c·ªë g·∫Øng t·∫°o ra m·ªôt message l·ªói c√≥ nghƒ©a cho user
    //V√≠ d·ª• khi c√≥ l·ªói trong qu√° tr√¨nh s·ª≠ d·ª•ng n√≥ s·∫Ω t·ª± th√™m 'CastError' tr∆∞·ªõc message
    //N√™n ph·∫£i t·∫°o ra message m·ªõi c√≥ √Ω nghƒ©a h∆°n, t∆∞·ªùng minh h∆°n cho user
    let error = { ...err }; //Not good to override err function so just copy that
    //CastError nh∆∞ l√† l·ªói trong qu√° tr√¨nh s·ª≠ d·ª•ng, ho·∫°t ƒë·ªông c·ªßa project(operation)
    if (err.name === 'CastError') error = handleCastErrorDB(error);
    if (err.code === 11000) error = handleDuplicateFieldsDB(error);
    if (err.name === 'ValidationError') error = handleValidationErrorDB(error);
    if (err.name === 'JsonWebTokenError') error = handleJWTError(error);
    if (err.name === 'TokenExpiredError') error = handleJWTExpired(error);
    sendErrorProd(error, res);
  }
};
module.exports = globalErrorHandler;
